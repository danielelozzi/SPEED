# Workflow name that will appear in the GitHub "Actions" section
name: Build and Release Executables

# Trigger: when to start the workflow
on:
  push:
    tags:
      - 'v*' # Triggers every time you create and publish a tag starting with "v" (e.g., v3.1, v3.1.1, etc.)

# Jobs to run
jobs:
  build:
    # Job name, which will be dynamic based on the operating system
    name: Build on ${{ matrix.os }}
    # Operating system to run the job on (Windows and macOS)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # Steps that make up the job
    steps:
      # 1. Checkout the repository code onto the virtual machine
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the specified Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install all project dependencies from the requirements.txt file
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Download the YOLOv8 model file only if it doesn't exist
      - name: Download YOLOv8 Model if not present
        run: |
          if [ ! -f "yolov8n.pt" ]; then
            echo "yolov8n.pt not found, downloading..."
            curl -L https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt -o yolov8n.pt
          else
            echo "yolov8n.pt already exists, skipping download."
          fi

      # 5. Run PyInstaller to create the executable with OS-specific flags
      - name: Build with PyInstaller
        run: |
          # Set the correct build flag based on the operating system
          # --onefile for Windows, --onedir for macOS .app bundles
          if [ "$RUNNER_OS" == "Windows" ]; then
            PYINSTALLER_FLAGS="--onefile"
          else
            PYINSTALLER_FLAGS="--onedir"
          fi

          pyinstaller --noconfirm $PYINSTALLER_FLAGS --windowed --name "SpeedAnalyzer" \
          --add-data "yolov8n.pt:." \
          --hidden-import "pandas" \
          --hidden-import "seaborn" \
          --hidden-import "ultralytics.utils" \
          --hidden-import "pkg_resources.extern" \
          GUI.py

      # 6. Upload the result (the executable or .app folder) as an "artifact"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          # The artifact name will be "SpeedAnalyzer-windows-latest" or "SpeedAnalyzer-macos-latest"
          name: SpeedAnalyzer-${{ matrix.os }}
          # The folder to upload, which contains the compiled file or .app directory
          path: dist/
