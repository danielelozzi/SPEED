#!/usr/bin/env Rscript
suppressPackageStartupMessages({
  library(optparse); library(speedAnalyzerR)
})

subcommands <- c("analyze","bids-convert","video","help")

if (length(commandArgs(trailingOnly = TRUE)) == 0) {
  cat("speed-analyzer-r <subcommand> [options]\n")
  cat("Subcommands: analyze, bids-convert, video, help\n")
  quit(status=0)
}

sub <- commandArgs(trailingOnly = TRUE)[1]

if (!(sub %in% subcommands)) {
  cat("Unknown subcommand: ", sub, "\n", sep="")
  quit(status=1)
}

argv <- commandArgs(trailingOnly = TRUE)[-1]

if (sub == "help") {
  cat("Usage:\n")
  cat("  speed-analyzer-r analyze --data DIR --out DIR --subject S01 [--bids]\n")
  cat("  speed-analyzer-r bids-convert --input DIR --out DIR --subject S01 [--session 01]\n")
  cat("  speed-analyzer-r video --data DIR --out DIR --subject S01 [--video path.mp4]\n")
  quit(status=0)
}

if (sub == "analyze") {
  option_list <- list(
    make_option(c("--data"), type="character", help="Data directory (or BIDS root with --bids)"),
    make_option(c("--out"), type="character", default=NULL, help="Output directory"),
    make_option(c("--subject"), type="character", default="S01", help="Subject id"),
    make_option(c("--bids"), action="store_true", default=FALSE, help="Interpret --data as BIDS-like root"),
    make_option(c("--video"), type="character", default=NULL, help="Optional video path for overlay"),
    make_option(c("--plots"), action="store_true", default=TRUE, help="Generate plots"),
    make_option(c("--no-plots"), action="store_true", default=FALSE, help="Disable plots"),
    make_option(c("--video-overlay"), action="store_true", default=FALSE, help="Also create video overlay")
  )
  opt <- parse_args(OptionParser(option_list=option_list), args=argv, positional_arguments = FALSE)
  if (isTRUE(opt$`no-plots`)) opt$plots <- FALSE
  if (is.null(opt$data)) stop("--data is required")
  out <- opt$out
  if (is.null(out)) out <- file.path(opt$data, "speed_out")
  speedAnalyzerR::run_full_analysis(
    working_dir = opt$data, output_dir = out, subject_name = opt$subject,
    generate_plots = opt$plots, generate_video = opt$`video-overlay`,
    bids = opt$bids, video_file = opt$video
  )
  quit(status=0)
}

if (sub == "bids-convert") {
  option_list <- list(
    make_option(c("--input"), type="character", help="Raw input directory"),
    make_option(c("--out"), type="character", help="BIDS root output"),
    make_option(c("--subject"), type="character", help="Subject id, e.g., S01"),
    make_option(c("--session"), type="character", default="01", help="Session id, e.g., 01")
  )
  opt <- parse_args(OptionParser(option_list=option_list), args=argv, positional_arguments = FALSE)
  if (is.null(opt$input) || is.null(opt$out) || is.null(opt$subject)) stop("Missing required options.")
  speedAnalyzerR::convert_to_bids(opt$input, opt$out, opt$subject, session = opt$session)
  quit(status=0)
}

if (sub == "video") {
  option_list <- list(
    make_option(c("--data"), type="character", help="Data directory containing gaze.csv and scene_video.mp4"),
    make_option(c("--out"), type="character", help="Output directory"),
    make_option(c("--subject"), type="character", default="S01", help="Subject id"),
    make_option(c("--video"), type="character", default=NULL, help="Optional path to video file")
  )
  opt <- parse_args(OptionParser(option_list=option_list), args=argv, positional_arguments = FALSE)
  if (is.null(opt$data) || is.null(opt$out)) stop("Missing required options.")
  speedAnalyzerR::create_video_overlay(opt$data, opt$out, subject = opt$subject, video_file = opt$video)
  quit(status=0)
}